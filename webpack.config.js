const path = require('path');
const webpack = require('webpack');
const merge = require('webpack-merge');

// Webpack plugins
const HtmlWebpackPlugin = require('html-webpack-plugin');

const host = process.env.HOST || 'localhost';
const port = process.env.PORT || 3000;

// Location of files
const srcFolder = 'app';
const buildFolder = 'dist';

const PATHS = {
    app: path.join(__dirname, srcFolder),
    build: path.join(__dirname, buildFolder),
};

const commonConfig = {
    entry: PATHS.app,

    resolve: {
        modules: [
            srcFolder,
            'node_modules',
        ],
        extensions: [
            '.js',
            '.jsx',
        ],
    },

    output: {
        path: PATHS.build,
        publicPath: '/',
    },

    performance: { hints: false },

    stats: 'errors-only',

    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
            }, {
                // For building vendor css files
                test: /\.css$/,
                include: /node_modules/,
                loaders: ['style-loader', 'css-loader'],    
            }, { // For building vendor css files
                test: /\.css$/,
                exclude: /node_modules/,
                loaders: ['style-loader', 'css-loader'],    
            }, {
                test: /\.(eot|svg|ttf|woff2?)$/,
                loader: 'file-loader',
            }, {
                test: /\.(jpe?g|png|gif)$/,
                loaders: [
                    'file-loader',
                    {
                        loader: 'image-webpack-loader',
                        query: {
                            mozjpeg: {
                                progressive: true,
                            },
                            gifsicle: {
                                interlaced: false,
                            },
                            optipng: {
                                optimizationLevel: 7,
                            },
                            pngquant: {
                                quality: '65-90',
                                speed: 4,
                            },
                        },
                    },
                ],
            }, {
                test: /\.(mp4|webm)$/,
                loader: 'url-loader',
                query: {
                    limit: 10000,
                },
            },
        ],
    },

    plugins: [
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: JSON.stringify(process.env.NODE_ENV),
            },
            __DEV__: process.env.NODE_ENV === 'development',
            __PROD__: process.env.NODE_ENV === 'production',
        }),
        new webpack.optimize.ModuleConcatenationPlugin(),
    ],
};

const devConfig = {
    output: {
        filename: '[name].js',
        chunkFilename: '[name].chunk.js',
    },

    devtool: 'cheap-module-source-map',

    devServer: {
        host,
        port,

        // respond to 404s with index.html
        historyApiFallback: true,

        // Location of files
        contentBase: PATHS.build,

        stats: 'errors-only',
    },

    plugins: [
        new HtmlWebpackPlugin({
            template: path.join(PATHS.app, 'index.ejs'),
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
        }),
    ],
};

const prodConfig = {
    output: {
        // Utilize long-term caching by adding content hashes (not compilation hashes) to compiled assets
        filename: '[name].[chunkhash].js',
        chunkFilename: '[name].[chunkhash].chunk.js',
    },

    devtool: 'source-map',

    plugins: [
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': `"production"`,
        }),

        // Minify and optimize the index.html
        new HtmlWebpackPlugin({
            template: path.join(PATHS.app, 'index.ejs'),
            minify: {
                removeComments: true,
                collapseWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                minifyJS: true,
                minifyCSS: true,
                minifyURLs: true,
            },
            inject: true,
        }),
        new webpack.ProvidePlugin({
            $: 'jquery',
            jQuery: 'jquery'
        }),
    ],
};


module.exports = (env) => {
    process.env.BABEL_ENV = env;

    if (env === 'development') {
        return merge(commonConfig, devConfig);
    }

    return merge(commonConfig, prodConfig);
};
